// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/repository.go
//
// Generated by this command:
//
//	mockgen -source internal/repository/repository.go -destination internal/repository/mocks/mock_repository.go
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"
	domain "yurii-lib/internal/models/domain"

	gomock "go.uber.org/mock/gomock"
)

// MockBookRepo is a mock of BookRepo interface.
type MockBookRepo struct {
	ctrl     *gomock.Controller
	recorder *MockBookRepoMockRecorder
}

// MockBookRepoMockRecorder is the mock recorder for MockBookRepo.
type MockBookRepoMockRecorder struct {
	mock *MockBookRepo
}

// NewMockBookRepo creates a new mock instance.
func NewMockBookRepo(ctrl *gomock.Controller) *MockBookRepo {
	mock := &MockBookRepo{ctrl: ctrl}
	mock.recorder = &MockBookRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBookRepo) EXPECT() *MockBookRepoMockRecorder {
	return m.recorder
}

// CreateBook mocks base method.
func (m *MockBookRepo) CreateBook(ctx context.Context, book domain.BookPlacement) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBook", ctx, book)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBook indicates an expected call of CreateBook.
func (mr *MockBookRepoMockRecorder) CreateBook(ctx, book any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBook", reflect.TypeOf((*MockBookRepo)(nil).CreateBook), ctx, book)
}

// DeleteBook mocks base method.
func (m *MockBookRepo) DeleteBook(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBook", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBook indicates an expected call of DeleteBook.
func (mr *MockBookRepoMockRecorder) DeleteBook(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBook", reflect.TypeOf((*MockBookRepo)(nil).DeleteBook), ctx, id)
}

// GetBooks mocks base method.
func (m *MockBookRepo) GetBooks(ctx context.Context, page, limit int) ([]domain.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBooks", ctx, page, limit)
	ret0, _ := ret[0].([]domain.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBooks indicates an expected call of GetBooks.
func (mr *MockBookRepoMockRecorder) GetBooks(ctx, page, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBooks", reflect.TypeOf((*MockBookRepo)(nil).GetBooks), ctx, page, limit)
}

// GetBooksByRack mocks base method.
func (m *MockBookRepo) GetBooksByRack(ctx context.Context, rack int) ([]domain.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBooksByRack", ctx, rack)
	ret0, _ := ret[0].([]domain.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBooksByRack indicates an expected call of GetBooksByRack.
func (mr *MockBookRepoMockRecorder) GetBooksByRack(ctx, rack any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBooksByRack", reflect.TypeOf((*MockBookRepo)(nil).GetBooksByRack), ctx, rack)
}

// UpdateBookInfo mocks base method.
func (m *MockBookRepo) UpdateBookInfo(ctx context.Context, id int, book domain.BookInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBookInfo", ctx, id, book)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBookInfo indicates an expected call of UpdateBookInfo.
func (mr *MockBookRepoMockRecorder) UpdateBookInfo(ctx, id, book any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBookInfo", reflect.TypeOf((*MockBookRepo)(nil).UpdateBookInfo), ctx, id, book)
}

// UpdateBookPlacement mocks base method.
func (m *MockBookRepo) UpdateBookPlacement(ctx context.Context, id, rack, shelf int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBookPlacement", ctx, id, rack, shelf)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBookPlacement indicates an expected call of UpdateBookPlacement.
func (mr *MockBookRepoMockRecorder) UpdateBookPlacement(ctx, id, rack, shelf any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBookPlacement", reflect.TypeOf((*MockBookRepo)(nil).UpdateBookPlacement), ctx, id, rack, shelf)
}

// MockUserRepo is a mock of UserRepo interface.
type MockUserRepo struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepoMockRecorder
}

// MockUserRepoMockRecorder is the mock recorder for MockUserRepo.
type MockUserRepoMockRecorder struct {
	mock *MockUserRepo
}

// NewMockUserRepo creates a new mock instance.
func NewMockUserRepo(ctrl *gomock.Controller) *MockUserRepo {
	mock := &MockUserRepo{ctrl: ctrl}
	mock.recorder = &MockUserRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepo) EXPECT() *MockUserRepoMockRecorder {
	return m.recorder
}

// CreateAdminUser mocks base method.
func (m *MockUserRepo) CreateAdminUser() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CreateAdminUser")
}

// CreateAdminUser indicates an expected call of CreateAdminUser.
func (mr *MockUserRepoMockRecorder) CreateAdminUser() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAdminUser", reflect.TypeOf((*MockUserRepo)(nil).CreateAdminUser))
}

// CreateUser mocks base method.
func (m *MockUserRepo) CreateUser() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CreateUser")
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserRepoMockRecorder) CreateUser() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserRepo)(nil).CreateUser))
}

// DeleteAdminUser mocks base method.
func (m *MockUserRepo) DeleteAdminUser() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteAdminUser")
}

// DeleteAdminUser indicates an expected call of DeleteAdminUser.
func (mr *MockUserRepoMockRecorder) DeleteAdminUser() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAdminUser", reflect.TypeOf((*MockUserRepo)(nil).DeleteAdminUser))
}

// DeleteUser mocks base method.
func (m *MockUserRepo) DeleteUser() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteUser")
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockUserRepoMockRecorder) DeleteUser() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockUserRepo)(nil).DeleteUser))
}

// GetAdminUserPassword mocks base method.
func (m *MockUserRepo) GetAdminUserPassword() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetAdminUserPassword")
}

// GetAdminUserPassword indicates an expected call of GetAdminUserPassword.
func (mr *MockUserRepoMockRecorder) GetAdminUserPassword() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdminUserPassword", reflect.TypeOf((*MockUserRepo)(nil).GetAdminUserPassword))
}

// GetUserPassword mocks base method.
func (m *MockUserRepo) GetUserPassword() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetUserPassword")
}

// GetUserPassword indicates an expected call of GetUserPassword.
func (mr *MockUserRepoMockRecorder) GetUserPassword() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserPassword", reflect.TypeOf((*MockUserRepo)(nil).GetUserPassword))
}

// UpdateUserPassword mocks base method.
func (m *MockUserRepo) UpdateUserPassword() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateUserPassword")
}

// UpdateUserPassword indicates an expected call of UpdateUserPassword.
func (mr *MockUserRepoMockRecorder) UpdateUserPassword() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserPassword", reflect.TypeOf((*MockUserRepo)(nil).UpdateUserPassword))
}
