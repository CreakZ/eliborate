basePath: /
definitions:
  dto.Book:
    properties:
      authors:
        items:
          type: string
        type: array
      category:
        type: string
      description:
        type: string
      id:
        type: integer
      is_foreign:
        type: boolean
      logo:
        description: Обложка книги. Хранит URL изображения
        type: string
      rack:
        type: integer
      shelf:
        type: integer
      title:
        type: string
    type: object
  dto.BookPlacement:
    properties:
      authors:
        items:
          type: string
        type: array
      category:
        type: string
      description:
        type: string
      is_foreign:
        type: boolean
      logo:
        description: Обложка книги. Хранит URL изображения
        type: string
      rack:
        type: integer
      shelf:
        type: integer
      title:
        type: string
    type: object
  dto.UserCreate:
    properties:
      login:
        type: string
      name:
        type: string
      password:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: shejustwannagethigh@yandex.ru
    name: Maxim
  description: This is a sample API documentation for your project
  termsOfService: http://example.com/terms/
  title: API Documentation
  version: "1.0"
paths:
  /admin:
    get:
      consumes:
      - application/json
      description: Returns admin user according to his ID
      parameters:
      - description: admin ID
        in: body
        name: id
        required: true
        schema:
          type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get admin user password
      tags:
      - admin
    put:
      consumes:
      - application/json
      description: Update admin user password according to his ID
      parameters:
      - description: ID администратора
        in: body
        name: id
        required: true
        schema:
          type: integer
      - description: Новый пароль
        in: body
        name: password
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Update admin user password
      tags:
      - admin
  /books:
    delete:
      description: Remove a book from the system using its ID
      parameters:
      - description: Book ID
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Delete a book by its ID
      tags:
      - Books
    get:
      description: Retrieve a list of books with pagination
      parameters:
      - description: Page number
        in: query
        name: page
        required: true
        type: integer
      - description: Limit per page
        in: query
        name: limit
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: page, limit, results (array of dto.Book), total_pages
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get a paginated list of books
      tags:
      - Books
    post:
      consumes:
      - application/json
      description: Create a new book entry in the system
      parameters:
      - description: Book Placement
        in: body
        name: book
        required: true
        schema:
          $ref: '#/definitions/dto.BookPlacement'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create a new book
      tags:
      - Books
  /books/{isbn}:
    get:
      description: Retrieve a book using its ISBN number
      parameters:
      - description: ISBN
        in: query
        name: isbn
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.Book'
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get a book by its ISBN
      tags:
      - Books
  /books/racks:
    get:
      description: Retrieve all books located in a specific rack
      parameters:
      - description: Rack Number
        in: query
        name: rack
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.Book'
            type: array
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get books by rack number
      tags:
      - Books
  /books/search:
    get:
      description: Search for books matching a text query
      parameters:
      - description: Search Query
        in: query
        name: text
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.Book'
            type: array
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Search books by text
      tags:
      - Books
  /books/update/info:
    put:
      consumes:
      - application/json
      description: Update details of an existing book
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Update book information
      tags:
      - Books
  /books/update/placement:
    put:
      consumes:
      - application/json
      description: Update the rack and shelf placement of a book
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Update book placement
      tags:
      - Books
  /login/user:
    post:
      consumes:
      - application/json
      description: Logs in a regular user and returns an access token if the login
        credentials are valid.
      parameters:
      - description: Login of the user
        in: body
        name: login
        required: true
        schema:
          type: string
      - description: Password of the user
        in: body
        name: password
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "201":
          description: Access token
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Logs in a regular user
      tags:
      - auth
  /public/admin:
    post:
      consumes:
      - application/json
      description: Logs in an admin user and returns an access token if the login
        credentials are valid.
      parameters:
      - description: Login of the admin user
        in: body
        name: login
        required: true
        schema:
          type: string
      - description: Password of the admin user
        in: body
        name: password
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "201":
          description: Access token
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Logs in an admin user
      tags:
      - auth
  /user:
    delete:
      consumes:
      - application/json
      description: Deletes the user with the provided ID
      parameters:
      - description: User ID
        in: body
        name: id
        required: true
        schema:
          type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Delete a user
      tags:
      - user
    get:
      consumes:
      - application/json
      description: Retrieves the password for a user given their ID
      parameters:
      - description: User ID
        in: body
        name: id
        required: true
        schema:
          type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "418":
          description: I'm a teapot
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get user password by ID
      tags:
      - user
    post:
      consumes:
      - application/json
      description: Creates a new user with provided login and password
      parameters:
      - description: User information
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.UserCreate'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            additionalProperties:
              type: integer
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "409":
          description: Conflict
          schema:
            additionalProperties:
              type: string
            type: object
        "418":
          description: I'm a teapot
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create a new user
      tags:
      - user
    put:
      consumes:
      - application/json
      description: Updates the password for the user with the given ID
      parameters:
      - description: User ID
        in: body
        name: id
        required: true
        schema:
          type: integer
      - description: New password
        in: body
        name: password
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Update user password
      tags:
      - user
swagger: "2.0"
